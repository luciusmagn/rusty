.TH RUSTY 1
.SH NAME
rusty \- malý a rychlý systém pro automatizaci překladu kódu jazyků C, C++ a pravděpodobně mnoha dalších
.SH SYNOPSIS
.B rusty
[\fB\-h\fR] [\fB\-\-help\fR] [\fB\-\-ast\fR] [\fB\-\-info\fR] [\fB\-\-about\fR] [\fB\-viratwn\fR] [\fB\-o\fR \fIDIR\fR] [\fB\-\-output\fR \fIDIR\fR] [\fB\-d\fR \fIDIR\fR] [\fB\-\-dir\fR \fIDIR\fR] [\fB\-c\fR \fICOMPILER\fR] [\fB\-\-compiler\fR \fICOMPILER\fR] [\fB\-o\fR \fIDIR\fR] [\fITARGETS\fR] [\fBclean\fR] [\fBinstall\fR] [\fBuninstall\fR]
.SH DESCRIPTION
.B rusty
je jednoduchý systém pro automatizaci překladu, který si původně zapůjčil syntaxi a koncepty ze zabudovaného systému pro jazyk C2. Rusty používá parsovací knihovnu mpc Daniela Holdena. Momentálně rozpoznává Rusty čtyři typy cílů: spustitelné soubory, statické knihovny, sdílené/dynamické knihovny a cíle objektového kódu. Rusty vyžaduje rustyfile (soubor rusty.txt). Rusty tento soubor hledá iterativně, takže není problém jej spouštět z pod-adresářů projektu.
.SH OPTIONS
.TP
.BR \-h ", " \-\-help\fR
Zobrazí základní text pomoci
.TP
.BR \-\-about\fR
Zobrazí text popisující Rusty a příklad použití.
.TP
.BR \-c ", " \-\-compiler " " \fIname\fR
Změní překladač použitý ke zpracování souborů.
.TP
.BR \-i ", " \-\-info\fR
Zobrazí informace o každém z cílů nalezeném v rustyfilu.
.TP
.BR \-d ", " \-\-dir " " \fIpath\fR
Změní pracovní adressář před startem hledání rustyfilu.
.TP
.BR \-r ", " \-\-fullrebuild\fR
Znovu postaví všechny soubory bez ohledu na to jestli byly modifikovány. Užitečné pokud se nepodaří kompilace a řešením problému byla změna, která nezasahovala do zdrojových souborů.
.TP
.BR \-t ", " \-\-time\fR
Změří a vypíše CPU čas, jaký spuštění Rusty trvalo. Poznámka: CPU čas bývá výrazně kratší než by byl reálný čas.
.TP
.BR \-n ", " \-\-check\fR
Pouze zkontroluje rustyfile a nic nepřekládá/nesetavuje. Ostatní přepínače jsou stále zpracovávány. Nevztahuje se na 'run' tagy, které běží tak jako tak.
.TP
.BR \-w ", " \-\-wanted\-only\fR
Zobrazí informace a abstraktní syntaxní strom pouze pro specifikované cíle, ne celý rustyfile. Neimplikuje přepínače -i a -a, je nutné je použít v konjukci s -w aby se informace zobrazily.
.SH MODUS OPERANDI
.nr step 1 1
.IP \fB\n[step] 6\fR
Rusty přečte parametry z příkazového řádku a začne hledat rustyfile.
.IP \fB\n[step] \fR
Po nalezení rustyfilu dojde k jeho přečtení, vymazání komentářů a následnému parsování.
.IP \fB\n[step] \fR
Na základě informací přečtených ze syntaxního stromu vytvoří Rusty cíle. 'run' tagy jsou okamžitě po přečtení spuštěny.
.IP \fB\n[step] \fR
Rusty zkontroluje jestli pro všechny požadované cíle existují jejich soubory a vypíše chybu není-li tomu tak.
.IP \fB\n[step] \fR
U každého souboru dojde ke kontrole, zda-li byl modifikován od předchozí kompilace. Má-li soubor @depends() atribut, jsou i zkontrolovány všechny soubory, zde specifikované. Dojde-li ke změně globálního závislotního souboru, je modifikovanost ignorována a všechny soubory jsu přeloženy znovu. Za tímto účelem vytváří Rusty anekdotálně minimální metadata ve složce .rusty v kořenovém adresáři projektu.
.IP \fB\n[step] \fR
Po kompilaci všech souborů, pokud je úspěšná, dochází k linkovací části programu. Pro binární soubory se využije překladače bez nějakých přídavných přepínačů. Pro sdílené knihovny se používá přepínač -shared, očekává se, ke kompilaci dodá uživatel přepínač -fPIC sám, uzná-li to za vhodné. Statické knihovny jsou vytvořené pomocí utility ar.
.IP \fB\n[step] \fR
Pokud byl na začátku specifikován cíl 'install' nebo 'uninstall', provede Rusty patřičnou operaci. Rusty povoluje jak instalaci tak odinstalaci najednou, i když se zeptá uživatele, zda-li je to úmyslné.
.SH LIMITACE
    Rusty občas nedokáže vždy určit, zda-li se překlad povedl. Problémy také dělá, když se v rustyfilech vyskytuje nekonsistentní ukončení řádků. Při (od)instalaci cílů neví, jestli má dostatečná práva

